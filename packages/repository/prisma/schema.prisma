// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String        @id @default(uuid())
  fisrtName String
  surname   String
  email     String
  password  String
  updateAt  DateTime      @default(now()) @updatedAt()
  histories userHistory[]
  accounts  account[]
  cards     card[]
  devices   device[]
}

model userHistory {
  id        String   @id @default(uuid())
  userId    String
  fisrtName String
  surname   String
  email     String
  password  String
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt()
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model device {
  id        String          @id @default(uuid())
  userId    String
  identity  String
  name      String?
  isDisable Boolean         @default(false)
  updateAt  DateTime        @default(now()) @updatedAt()
  users     user            @relation(fields: [userId], references: [id], onDelete: Cascade)
  histories deviceHistory[]
}

model deviceHistory {
  id        String   @id @default(uuid())
  deviceId  String
  identity  String
  name      String?
  isDisable Boolean  @default(false)
  updateAt  DateTime @default(now()) @updatedAt()
  device    device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model account {
  id           String               @id @default(uuid())
  userId       String
  typeId       String
  value        BigInt
  limit        BigInt               @default(0)
  date         DateTime             @default(now()) @updatedAt()
  user         user                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         accountType          @relation(fields: [typeId], references: [id], onDelete: Cascade)
  histories    accountHistory[]
  transactions accountTransaction[]
}

model accountHistory {
  id        String   @id @default(uuid())
  accountId String
  typeId    String
  value     BigInt
  limit     BigInt   @default(0)
  date      DateTime @default(now()) @updatedAt()
  account   account  @relation(fields: [accountId], references: [id])
}

model accountType {
  id        String               @id @default(uuid())
  name      String
  date      DateTime             @default(now()) @updatedAt()
  accounts  account[]
  histories accountTypeHistory[]
}

model accountTypeHistory {
  id     String      @id @default(uuid())
  typeId String
  name   String
  date   DateTime    @default(now()) @updatedAt()
  type   accountType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model accountTransaction {
  id                String                      @id @default(uuid())
  accountId         String
  transactionTypeId String
  value             BigInt
  date              DateTime                    @default(now()) @updatedAt()
  account           account                     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  transactionType   accountTransactionType      @relation(fields: [transactionTypeId], references: [id], onDelete: Cascade)
  histories         accountTransactionHistory[]
}

model accountTransactionHistory {
  id            String             @id @default(uuid())
  transactionId String
  value         BigInt
  date          DateTime           @default(now()) @updatedAt()
  transaction   accountTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model accountTransactionType {
  id                  String                          @id @default(uuid())
  name                String
  date                DateTime                        @default(now()) @updatedAt()
  accountTransactions accountTransaction[]
  histories           accountTransactionTypeHistory[]
}

model accountTransactionTypeHistory {
  id                       String                 @id @default(uuid())
  accountTransactionTypeId String
  name                     String
  date                     DateTime               @default(now()) @updatedAt()
  accountTransactionType   accountTransactionType @relation(fields: [accountTransactionTypeId], references: [id], onDelete: Cascade)
}

model card {
  id        String        @id @default(uuid())
  userId    String
  typeId    String
  isVirtual Boolean
  isCredit  Boolean
  isDebit   Boolean
  limit     BigInt
  date      DateTime      @default(now()) @updatedAt()
  user      user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      cardType      @relation(fields: [typeId], references: [id], onDelete: Cascade)
  histories cardHistory[]
}

model cardHistory {
  id        String   @id @default(uuid())
  cardId    String
  isVirtual Boolean
  isCredit  Boolean
  isDebit   Boolean
  limit     BigInt
  date      DateTime @default(now()) @updatedAt()
  card      card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model cardType {
  id        String            @id @default(uuid())
  name      String
  date      DateTime          @default(now()) @updatedAt()
  cards     card[]
  histories cardTypeHistory[]
}

model cardTypeHistory {
  id     String   @id @default(uuid())
  typeId String
  name   String
  date   DateTime @default(now()) @updatedAt()
  type   cardType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}
